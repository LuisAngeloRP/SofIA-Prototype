require('dotenv').config();
const WhatsAppPlatform = require('./whatsapp/server');
const WebPlatform = require('./web/server');
const { validateEnvironmentConfig } = require('../shared/utils');

class SofiaMultiPlatform {
    constructor() {
        this.platforms = {};
        this.config = this.loadConfiguration();
        
        console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
        console.log('‚ïë   SofIA Finance Advisor v2.1 - MULTI  ‚ïë');
        console.log('‚ïë   IA Conversacional + Reconocimiento  ‚ïë');
        console.log('‚ïë          de Im√°genes Financieras       ‚ïë');
        console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
        
        this.displayConfiguration();
    }

    loadConfiguration() {
        const envConfig = validateEnvironmentConfig();
        
        return {
            enableWhatsApp: process.env.ENABLE_WHATSAPP !== 'false', // Por defecto true
            enableWeb: process.env.ENABLE_WEB !== 'false', // Por defecto true
            webPort: process.env.API_PORT || 3001,
            webappUrl: process.env.WEBAPP_URL || 'http://localhost:3000',
            perplexityConfigured: envConfig.hasPerplexity,
            ...envConfig
        };
    }

    displayConfiguration() {
        console.log('\nüîß Configuraci√≥n de Plataformas:');
        console.log(`üì± WhatsApp: ${this.config.enableWhatsApp ? '‚úÖ Habilitado' : '‚ùå Deshabilitado'}`);
        console.log(`üåê Web API: ${this.config.enableWeb ? '‚úÖ Habilitado' : '‚ùå Deshabilitado'}`);
        
        if (this.config.enableWeb) {
            console.log(`   ‚îî‚îÄ Puerto: ${this.config.webPort}`);
            console.log(`   ‚îî‚îÄ WebApp URL: ${this.config.webappUrl}`);
        }
        
        console.log(`ü§ñ IA Perplexity: ${this.config.perplexityConfigured ? '‚úÖ Configurada' : '‚ö†Ô∏è No configurada'}`);
        
        if (!this.config.perplexityConfigured) {
            console.log('üí° Para funcionalidad completa, configura PERPLEXITY_API_KEY en .env');
        }
        
        if (this.config.missingVars.length > 0) {
            console.log(`‚ö†Ô∏è Variables faltantes: ${this.config.missingVars.join(', ')}`);
        }
        console.log('');
    }

    displaySuccessfulStartup(enabledPlatforms) {
        console.log('\nüéâ SofIA Finance Advisor Multi-Platform est√° lista!');
        console.log(`üìä Plataformas activas: ${enabledPlatforms.join(', ')}`);
        
        // Web API URLs
        if (this.platforms.web) {
            console.log('\nüåê URLs del Backend (Web API):');
            console.log(`   ‚îú‚îÄ üîó API Base: http://localhost:${this.config.webPort}`);
            console.log(`   ‚îú‚îÄ üíä Health Check: http://localhost:${this.config.webPort}/health`);
            console.log(`   ‚îú‚îÄ üí¨ Chat API: http://localhost:${this.config.webPort}/api/chat`);
            console.log(`   ‚îú‚îÄ üì∑ Image API: http://localhost:${this.config.webPort}/api/chat/image`);
            console.log(`   ‚îî‚îÄ üîå WebSocket: ws://localhost:${this.config.webPort}`);
        }
        
        // WhatsApp Platform
        if (this.platforms.whatsapp) {
            console.log('\nüì± WhatsApp Platform:');
            console.log('   ‚îî‚îÄ ‚è≥ Esperando c√≥digo QR para conectar...');
        }
        
        // WebApp Information
        if (this.config.enableWeb) {
            console.log('\nüñ•Ô∏è  Frontend (WebApp):');
            console.log(`   ‚îî‚îÄ üåç WebApp: ${this.config.webappUrl}`);
            console.log('      üí° Ejecuta: npm run webapp:dev (si no est√° corriendo)');
        }
        
        // Instructions
        console.log('\nüìã Instrucciones:');
        if (this.platforms.web && this.platforms.whatsapp) {
            console.log('   ‚îú‚îÄ üåê Usa la WebApp en:', this.config.webappUrl);
            console.log('   ‚îî‚îÄ üì± Escanea el QR cuando aparezca para WhatsApp');
        } else if (this.platforms.web) {
            console.log('   ‚îî‚îÄ üåê Usa la WebApp en:', this.config.webappUrl);
        } else if (this.platforms.whatsapp) {
            console.log('   ‚îî‚îÄ üì± Escanea el QR cuando aparezca para WhatsApp');
        }
        
        console.log('\nüîÑ Estado: Todo listo para recibir mensajes!');
        console.log('‚ïê'.repeat(60));
    }

    async initializeWhatsApp() {
        if (!this.config.enableWhatsApp) {
            console.log('üì± WhatsApp deshabilitado por configuraci√≥n');
            return;
        }

        console.log('üîÑ Inicializando plataforma WhatsApp...');
        
        try {
            this.platforms.whatsapp = new WhatsAppPlatform();
            console.log('‚úÖ Plataforma WhatsApp inicializada');
        } catch (error) {
            console.error('‚ùå Error inicializando WhatsApp:', error.message);
            throw error;
        }
    }

    async initializeWeb() {
        if (!this.config.enableWeb) {
            console.log('üåê Web API deshabilitado por configuraci√≥n');
            return;
        }

        console.log('üîÑ Inicializando plataforma Web...');
        
        try {
            this.platforms.web = new WebPlatform();
            await this.platforms.web.start();
            console.log('‚úÖ Plataforma Web inicializada');
        } catch (error) {
            console.error('‚ùå Error inicializando Web API:', error.message);
            throw error;
        }
    }

    async start() {
        console.log('üöÄ Iniciando SofIA Multi-Platform...');
        
        const enabledPlatforms = [];
        
        try {
            // Inicializar plataformas habilitadas
            if (this.config.enableWhatsApp) {
                await this.initializeWhatsApp();
                enabledPlatforms.push('WhatsApp');
            }
            
            if (this.config.enableWeb) {
                await this.initializeWeb();
                enabledPlatforms.push('Web API');
            }

            if (enabledPlatforms.length === 0) {
                console.log('‚ö†Ô∏è No hay plataformas habilitadas. Verifica tu configuraci√≥n.');
                return;
            }

            this.displaySuccessfulStartup(enabledPlatforms);

        } catch (error) {
            console.error('‚ùå Error durante el inicio:', error);
            await this.stop();
            throw error;
        }
    }

    async stop() {
        console.log('üõë Deteniendo SofIA Multi-Platform...');
        
        const stopPromises = [];
        
        if (this.platforms.whatsapp) {
            console.log('‚èπÔ∏è Deteniendo WhatsApp...');
            this.platforms.whatsapp.memory.forceSync();
            stopPromises.push(this.platforms.whatsapp.stop());
        }
        
        if (this.platforms.web) {
            console.log('‚èπÔ∏è Deteniendo Web API...');
            this.platforms.web.memory.forceSync();
            stopPromises.push(this.platforms.web.stop());
        }

        await Promise.all(stopPromises);
        console.log('‚úÖ Todas las plataformas detenidas');
    }

    getStatus() {
        return {
            platforms: Object.keys(this.platforms),
            config: this.config,
            isRunning: Object.keys(this.platforms).length > 0
        };
    }
}

// Funci√≥n para mostrar ayuda de configuraci√≥n
function showConfigHelp() {
    console.log('\nüìñ Variables de Entorno Disponibles:');
    console.log('  PERPLEXITY_API_KEY=tu_api_key    # Requerida para IA completa');
    console.log('  ENABLE_WHATSAPP=true|false       # Habilitar WhatsApp (default: true)');
    console.log('  ENABLE_WEB=true|false             # Habilitar Web API (default: true)');
    console.log('  API_PORT=3001                     # Puerto para Web API (default: 3001)');
    console.log('  WEBAPP_URL=http://localhost:3000  # URL de la webapp NextJS');
    console.log('\nüí° Ejemplos de uso:');
    console.log('  # Solo WhatsApp:');
    console.log('  ENABLE_WEB=false npm start');
    console.log('  # Solo Web:');
    console.log('  ENABLE_WHATSAPP=false npm start');
    console.log('  # Ambas plataformas (default):');
    console.log('  npm start');
}

// Inicializar si este archivo se ejecuta directamente
if (require.main === module) {
    // Verificar argumentos de l√≠nea de comandos
    const args = process.argv.slice(2);
    
    if (args.includes('--help') || args.includes('-h')) {
        showConfigHelp();
        process.exit(0);
    }

    const sofia = new SofiaMultiPlatform();

    // Manejar cierre graceful
    const handleShutdown = async (signal) => {
        console.log(`\nüì° Recibida se√±al ${signal}`);
        await sofia.stop();
        process.exit(0);
    };

    process.on('SIGINT', () => handleShutdown('SIGINT'));
    process.on('SIGTERM', () => handleShutdown('SIGTERM'));
    
    // Manejar errores no capturados
    process.on('unhandledRejection', (reason, promise) => {
        console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
    });

    process.on('uncaughtException', (error) => {
        console.error('‚ùå Uncaught Exception:', error);
        sofia.stop().then(() => process.exit(1));
    });

    // Iniciar la aplicaci√≥n
    sofia.start().catch(async (error) => {
        console.error('‚ùå Error fatal durante el inicio:', error);
        await sofia.stop();
        process.exit(1);
    });
}

module.exports = SofiaMultiPlatform; 